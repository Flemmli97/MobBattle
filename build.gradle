buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

version = "${mcversion}-${modversion}"
group = "io.github.flemmli97"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'snapshot', version: mcp_mapping

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            //For linux intellij
            environment 'PULSE_RUNTIME_PATH', '/run/user/1000/pulse'
            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                modid {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenLocal()
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        name = "CurseMaven"
        url "https://www.cursemaven.com"
    }
    maven {
        name = "TenshiLib"
        url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
    }
    maven {
        name = "TenshiLib"
        url "https://maven.pkg.github.com/flemmli97/TenshiLib"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + "${mcversion}-${forge_version}"

    //compile animania_dep
    //compile mca_dep

    compileOnly tenshilib_dep
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "flemmli97",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "flemmli97",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    tasks.publish.dependsOn build
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            groupId group
            artifactId modid
            version project.version
        }
    }
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            //url "https://maven.pkg.github.com/flemmli97/MobBattle"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
                //password = project.findProperty("gpr.github.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

def changelog(int versions) {
    try {
        def changelog = ""
        def match = 0
        file("Changelog.txt").eachLine {
            if (it.matches("${project.mod_name} ([0-9].[0-9].[0-9])"))
                match++
            if (match <= versions) {
                changelog += it + "\n"
            } else
                return
        }
        return changelog + "\n\n"
    } catch (exception) {
        return "${project.mod_name} ${project.modversion}\n==========\n"
    }
}

//Splits the changelog into multiple parts if they get bigger than discords embed field size (1024)
def discordChangelog() {
    def changelog = changelog(1)
    def res = new ArrayList()
    if (changelog.size() < 1024) {
        res.add(changelog)
        return res;
    }
    def temp = ""
    changelog.split("\n").each {
        it = it + "\n"
        if ((temp.size() + it.size()) >= 1024) {
            res.add(temp)
            temp = it
        } else
            temp += it
    }
    res.add(temp)
    return res
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0

    project {
        id = "${curse_id}"
        addGameVersion "Forge"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        changelog = changelog(3).replace("\n-", "\n\n- ")
        changelogType = "markdown"
        releaseType = 'release'
        /*relations {
            "${project.curse_dep}".split(', ').each {
                requiredDependency "${it}"
            }
        }*/
    }
}

tasks.getByName("curseforge").doLast {
    if (project.ping_id == 0)
        return
    try {
        def newFileId = tasks.getByName("curseforge${project.curse_id}").property('mainArtifact').fileID

        def webhook = new Webhook(findProperty('discordHook'), "${project.mod_name} Upload")

        def message = new Message()
        def version = project.curse_versions.split(', ')[0]
        message.setUsername("Release")
        message.setContent("<@&${project.ping_id}> ${project.mod_name} ${project.modversion} for Minecraft ${mcversion} has been released!")
        message.setAvatarUrl("https://cdn.discordapp.com/avatars/680540027255652407/e4b7a058b24843ae13389a9a3cc3ae8c.png?size=128")
        
        def embed = new Embed()
        embed.addField('Get it here (When it is accepted)', "${project.findProperty('curse_page')}/files/${newFileId}", false)
        def changelog = discordChangelog()
        if (changelog.size() == 1)
            embed.addField('Change Log', "```md\n${changelog.get(0) ?: 'Unavailable :('}```", false)
        else
            changelog.forEach {
                embed.addField("Change Log", "```md\n${it}```", false)
            }
        embed.setColor(0xFF8000)
        message.addEmbed(embed)

        webhook.sendMessage(message)
    }

    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

task buildUploadAll(group: "publishing") {
    dependsOn clean, build, publish, tasks.getByName("curseforge")
    build.mustRunAfter clean
    tasks.findByName("curseforge").mustRunAfter publish
}

tasks.getByName("curseforge").dependsOn build
publish.dependsOn build
